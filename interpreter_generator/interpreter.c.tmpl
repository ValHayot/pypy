typedef struct {} PyObject;
typedef struct {} PyThreadState;
typedef struct {} _PyInterpreterFrame;
typedef struct {} _Py_atomic_int;
typedef struct {} _PyCFrame;
typedef struct {} _Py_CODEUNIT;
typedef struct {} binaryfunc;
typedef struct {} PyLongObject;
typedef struct {} destructor;
typedef struct {} PyFloatObject;
typedef struct {} _PyBinarySubscrCache;
typedef struct {} _PyObject_Free;
typedef struct {} Py_ssize_t;
typedef struct {} PyTypeObject;
typedef struct {} PyHeapTypeObject;
typedef struct {} PyFunctionObject;
typedef struct {} PyCodeObject;
typedef struct {} PyListObject;
typedef struct {} _PyStoreSubscrCache;
typedef struct {} PyDictObject;
typedef struct {} unaryfunc;
typedef struct {} PyGenObject;
typedef struct {} PySendResult;
typedef struct {} _PyErr_StackItem;
typedef struct {} PyStopIterationObject;
typedef struct {} _PyUnpackSequenceCache;
typedef struct {} _PyAttrCache;
typedef struct {} _PyLoadGlobalCache;
typedef struct {} PyDictUnicodeEntry;
typedef struct {} PyDictOrValues;
typedef struct {} PyModuleObject;
typedef struct {} PyDictKeyEntry;
typedef struct {} _PyLoadMethodCache;
typedef struct {} PyDictValues;
typedef struct {} _PyCompareOpCache;
typedef struct {} _PyForIterCache;
typedef struct {} _PyListIterObject;
typedef struct {} _PyTupleIterObject;
typedef struct {} PyTupleObject;
typedef struct {} _PyRangeIterObject;
typedef struct {} PyMethodObject;
typedef struct {} _PyCallCache;
typedef struct {} PyCFunction;
typedef struct {} _PyCFunctionFast;
typedef struct {} _PyCFunctionFastWithKeywords;
typedef struct {} PyInterpreterState;
typedef struct {} PyMethodDescrObject;
typedef struct {} PyMethodDef;
typedef struct {} _PyBinaryOpCache;

typedef int size_t;
typedef int uint16_t;
typedef int uint32_t;
typedef int uint64_t;

#define SET_TOP(v)        stack_pointer[-1] = v
#define SET_SECOND(v)     stack_pointer[-2] = v
#define PEEK(n)           stack_pointer[-(n)]
#define POKE(n, v)        stack_pointer[-(n)] = v

#define PUSH(val) PUSH(val)
#define POP() POP()
#define TOP() TOP()
#define SECOND() SECOND()
#define STACK_GROW(n) STACK_GROW(n)
#define STACK_SHRINK(n) STACK_SHRINK(n)
#define EMPTY() EMPTY()
#define STACK_LEVEL() STACK_LEVEL()
#define DISPATCH() DISPATCH()
#define PY_VECTORCALL_ARGUMENTS_OFFSET 1

#define Py_TYPE type
#define PyFloat_FromDouble(x) x
#define _PyLong_Add(x, y) x + y
#define PyObject_GetItem(x, y) x[y]
#define PyList_GET_ITEM(x, y) x[y]
#define PyList_GET_SIZE(l) len(l)
#define PyList_SET_ITEM(list, index, value) list[index] = value
#define PyTuple_GET_ITEM(x, y) x[y]
#define PyTuple_GET_SIZE(l) len(l)
#define PyTuple_SET_ITEM(list, index, value) list[index] = value
// #define PyObject_GetItem(x, y) x[y]
// #define PyObject_GetSize(l) len(l)
// #define PyObject_SetItem(list, index, value) list[index] = value
#define _Py_ID(x) id(x)
#define Py_True True
#define Py_False False
#define Py_None None
#define PyNumber_Invert(x) 1/x
#define _PyLong_Multiply(x, y) x * y
#define _PyLong_Subtract(x, y) x - y
#define PyUnicode_Concat(x, y) x + y
#define GETITEM(x, y) x[y]
#define PREDICTED(x)
#define PREDICT(x)
#define _PyList_Extend(x, y) x.extend(y)
#define PyFloat_AS_DOUBLE(x) x
#define PyObject_GetIter(x) iter(x)
#define PyObject_Length(x) len(x)
#define PyLong_FromSsize_t(x) x
#define PyObject_IsInstance(x, y) isinstance(x, y)
#define PyBool_FromLong(x) bool(x)
#define PySlice_New(x, y, z) slice(x, y, z)
#define Py_ARRAY_LENGTH(x) len(x)
#define PyUnicode_Append(x, y) x + y
#define PySet_Add(x, y) x.add(y)
#define PyLong_AsLong(x) x
#define strlen(x) x
#define PyList_AsTuple(x) tuple(x)
#define PySet_New(x) set()
#define PyDict_New(x) dict()
#define Py_ABS(x) abs(x)
#define PyObject_GetAttr(x, y) x[y]
#define _PyUnicode_Equal(x, y) x == y
// #define Py_Is(x, y) x is y
// #define PySequence_Contains(x, y) y in x

#define Py_DECREF(s) "decref"
#define Py_XDECREF(s) "decref"
#define Py_INCREF(s) "incref"
#define _Py_DECREF_SPECIALIZED(x, y) "decref"
#define _Py_INCREF_SPECIALIZED(x, y) "incref"
#define STAT_INC(x, y)

#define GETLOCAL(i) GETLOCAL(i)
#define TARGET(op) case #op:
#define DEOPT_IF(cond, instname) DEOPT_IF(cond, instname)
#define ERROR_IF(cond, labelname) ERROR_IF(cond, labelname)
#define JUMPBY(offset) JUMPBY(offset)
#define GO_TO_INSTRUCTION(instname) GO_TO_INSTRUCTION(instname)
#define DISPATCH_SAME_OPARG() DISPATCH_SAME_OPARG()

#define inst(name, ...) case name:
#define op(name, ...) /* NAME is ignored */
#define macro(name) static int MACRO_##name
#define super(name) static int SUPER_##name
#define family(name, ...) static int family_##name

#define NAME_ERROR_MSG "name '%.200s' is not defined"

// Dummy variables for stack effects.
static PyObject *value, *value1, *value2, *left, *right, *res, *sum, *prod,
    *sub;
static PyObject *container, *start, *stop, *v, *lhs, *rhs;
static PyObject *list, *tuple, *dict, *owner;
static PyObject *exit_func, *lasti, *val, *retval, *obj, *iter;
static PyObject *aiter, *awaitable, *iterable, *w, *exc_value, *bc;
static PyObject *orig, *excs, *update, *b, *fromlist, *level, *from;
static size_t jump;
static uint16_t when_to_jump_mask, invert, counter, index, hint;
static uint32_t type_version;
// Dummy opcode names for 'op' opcodes
#define _COMPARE_OP_FLOAT 1003
#define _COMPARE_OP_INT 1004
#define _COMPARE_OP_STR 1005
#define _JUMP_IF 1006

static PyObject *interpreter(
    PyThreadState *tstate,
    _PyInterpreterFrame *frame,
    unsigned char opcode,
    unsigned int oparg,
    _Py_atomic_int * const eval_breaker,
    _PyCFrame cframe,
    PyObject *names,
    PyObject *consts,
    _Py_CODEUNIT *next_instr,
    PyObject **stack_pointer,
    PyObject *kwnames,
    int throwflag,
    binaryfunc binary_ops[]
) {
  _PyInterpreterFrame entry_frame;

  switch (opcode) {
    /*CASES*/
  }
error:;
exception_unwind:;
handle_eval_breaker:;
resume_frame:;
resume_with_error:;
start_frame:;
unbound_local_error:;
pop_4_error:
  STACK_SHRINK(1);
pop_3_error:
  STACK_SHRINK(1);
pop_2_error:
  STACK_SHRINK(1);
pop_1_error:
  STACK_SHRINK(1);
}

// Future families go below this point //

family(call) = {CALL,
                CALL_PY_EXACT_ARGS,
                CALL_PY_WITH_DEFAULTS,
                CALL_BOUND_METHOD_EXACT_ARGS,
                CALL_BUILTIN_CLASS,
                CALL_BUILTIN_FAST_WITH_KEYWORDS,
                CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS,
                CALL_NO_KW_BUILTIN_FAST,
                CALL_NO_KW_BUILTIN_O,
                CALL_NO_KW_ISINSTANCE,
                CALL_NO_KW_LEN,
                CALL_NO_KW_LIST_APPEND,
                CALL_NO_KW_METHOD_DESCRIPTOR_FAST,
                CALL_NO_KW_METHOD_DESCRIPTOR_NOARGS,
                CALL_NO_KW_METHOD_DESCRIPTOR_O,
                CALL_NO_KW_STR_1,
                CALL_NO_KW_TUPLE_1,
                CALL_NO_KW_TYPE_1};
family(for_iter) = {FOR_ITER, FOR_ITER_LIST, FOR_ITER_RANGE};
family(load_attr) = {LOAD_ATTR,
                     LOAD_ATTR_CLASS,
                     LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN,
                     LOAD_ATTR_INSTANCE_VALUE,
                     LOAD_ATTR_MODULE,
                     LOAD_ATTR_PROPERTY,
                     LOAD_ATTR_SLOT,
                     LOAD_ATTR_WITH_HINT,
                     LOAD_ATTR_METHOD_LAZY_DICT,
                     LOAD_ATTR_METHOD_NO_DICT,
                     LOAD_ATTR_METHOD_WITH_DICT,
                     LOAD_ATTR_METHOD_WITH_VALUES};
family(load_global) = {LOAD_GLOBAL, LOAD_GLOBAL_BUILTIN, LOAD_GLOBAL_MODULE};
family(store_fast) = {STORE_FAST, STORE_FAST__LOAD_FAST,
                      STORE_FAST__STORE_FAST};
family(unpack_sequence) = {UNPACK_SEQUENCE, UNPACK_SEQUENCE_LIST,
                           UNPACK_SEQUENCE_TUPLE, UNPACK_SEQUENCE_TWO_TUPLE};
